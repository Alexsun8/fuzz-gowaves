// Code generated by go114-fuzz-build; DO NOT EDIT.

// +build ignore

package main_i

import (
	"github.com/wavesplatform/gowaves/fuzz-WE"
	"unsafe"
	"runtime"
	"strings"
	
	target "github.com/wavesplatform/gowaves/pkg/node_init"
)

// #include <stdint.h>
import "C"

var node_initialized C.bool = C.bool(true)

//export LLVMFuzzerTestOneInput
func LLVMFuzzerTestOneInput(data *C.char, size C.size_t) C.int {
	node_initialized = C.bool(fuzz_WE.NodeInitForFuzz())

	// TODO(mdempsky): Use unsafe.Slice once golang.org/issue/19367 is accepted.
	s := (*[1<<30]byte)(unsafe.Pointer(data))[:size:size]
	defer catchPanics()
	target.Fuzz(s)
	return 0
}

func main() {
}

func catchPanics() {
	if r := recover(); r != nil {
		var err string
		switch r.(type) {
		case string:
			err = r.(string)
		case runtime.Error:
			err = r.(runtime.Error).Error()
		case error:
			err = r.(error).Error()
		}
		if strings.Contains(err, "GO-FUZZ-BUILD-PANIC") {
			return
		} else {
			panic(err)
		}
	}
}
